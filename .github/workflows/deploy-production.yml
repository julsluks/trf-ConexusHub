name: Deploy to Production
run-name: ${{ github.actor }} is deploying to production üöÄ

on:
  push:
    branches: [deploy]

jobs:
  CONEXIO-SERVIDOR:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

      - name: Conectar por SSH, actualizar servidor e instalar dependencias
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            echo "üöÄ Iniciando actualizaciones e instalaci√≥n de dependencias..."

            # Actualizar sistema dependencies
            sudo apt update && sudo apt upgrade -y

            # Instalar Node.js (v20) y npm desde NodeSource
            if ! command -v node >/dev/null 2>&1; then
              echo "üì¶ Instalando Node.js y npm..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt install -y nodejs
            else
              echo "‚úÖ Node.js ya est√° instalado"
            fi

            # Confirmar versiones instaladas
            node -v
            npm -v

            # Asegurar que Docker est√© activo
            sudo systemctl enable docker
            sudo systemctl start docker

            # Instalar certbot si no est√° instalado
            if ! command -v certbot &> /dev/null; then
              echo "üì¶ Instalando Certbot..."
              sudo apt install -y certbot
            else
              echo "‚úÖ Certbot ya est√° instalado"
            fi

            # Crear carpetas necesarias si no existen
            sudo mkdir -p /opt/conexus/front-vue
            sudo mkdir -p /opt/conexus/back-node
            sudo mkdir -p /opt/conexus/webroot
            sudo mkdir -p /opt/conexus/letsencrypt
            sudo chmod -R 755 /opt/conexus
          EOF

  SECRETS-GITHUB:
    needs: [CONEXIO-SERVIDOR]
    runs-on: ubuntu-latest
    steps:
      - name: Obtener variables de entorno
        uses: actions/checkout@v4

      - name: Update docker compose
        run: |
          echo "Afegir variables d'entorn al .env"
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          echo "" >> .env.production

          # Copiar .env.production al servidor y renombrarlo .env
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem .env.production ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/.env.production

          # Conectarse por SSH y a√±adir las variables sensibles
          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} <<EOF
          echo "üîê Afegint secrets al fitxer .env" 

          echo "NODE_DB_USER=${{ secrets.NODE_DB_USER }}" >> /opt/conexus/.env.production
          echo "NODE_DB_PASSWORD=${{ secrets.NODE_DB_PASSWORD }}" >> /opt/conexus/.env.production
          echo "NODE_DB_ROOT_PASSWORD=${{ secrets.NODE_ROOT_PASSWORD }}" >> /opt/conexus/.env.production
          echo "NODE_SECRET_KEY_TOKEN=${{ secrets.NODE_SECRET_KEY_TOKEN}}" >> /opt/conexus/.env.production

          # A√±adir variables del contenedor nginx
          echo "NGINX_DB_ROOT_PASSWORD=${{ secrets.NGINX_DB_ROOT_PASSWORD }}" >> /opt/conexus/.env.production
          echo "NGINX_DB_USER=${{ secrets.NGINX_DB_USER }}" >> /opt/conexus/.env.production
          echo "NGINX_DB_PASSWORD=${{ secrets.NGINX_DB_PASSWORD }}" >> /opt/conexus/.env.production
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> /opt/conexus/.env.production
          
          # A√±adir variables de MongoDB y mongo-express para producci√≥n
          echo "MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}" >> /opt/conexus/.env.production
          echo "MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}" >> /opt/conexus/.env.production
          echo "MONGO_ROOT_URL=${{ secrets.MONGO_ROOT_URL }}" >> /opt/conexus/.env.production
          echo "MONGO_EXPRESS_USERNAME=${{ secrets.MONGO_EXPRESS_USERNAME }}" >> /opt/conexus/.env.production
          echo "MONGO_EXPRESS_PASSWORD=${{ secrets.MONGO_EXPRESS_PASSWORD }}" >> /opt/conexus/.env.production 

          echo "SSL_EMAIL_ADDRESS=${{ secrets.SSL_EMAIL_ADDRESS}}" >> /opt/conexus/.env.production

          # Renombrar .env.production a .env
          cp /opt/conexus/.env.production /opt/conexus/.env

          cat /opt/conexus/.env
          echo "‚úÖ .env completat!"
          EOF

  BUILD-FRONTEND-AND-BUILD-PORTAINER:
    needs: [CONEXIO-SERVIDOR, SECRETS-GITHUB]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Subir front-vue al servidor sin node_modules
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          rsync -avz --exclude=node_modules --exclude=dist -e "ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem" front-vue/ ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/front-vue/
          
          # Copiar el .env de producci√≥n del servidora a la carpeta front-vue del servidor 

          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
          
          cp /opt/conexus/.env /opt/conexus/front-vue/.env.production
          
          EOF

          # Copiar el prod.Dockerfile al servidor en la carpeta front
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem front-vue/prod.Dockerfile ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/front-vue/
      
      - name: Levantar Portainer con Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            cd /opt/conexus
            # Aseg√∫rate de que el archivo docker-compose.portainer.yml est√© en la ubicaci√≥n correcta
            if [ -f docker-compose.portainer.yml ]; then
              # Levantar los contenedores de Portainer y construir la imagen si es necesario
              sudo docker-compose -f docker-compose.portainer.yml up --build -d
            else
              echo "No se encontr√≥ docker-compose.portainer.yml"
            fi
          EOF

  BUILD-BACKEND:
    needs: [BUILD-FRONTEND-AND-BUILD-PORTAINER]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Subir archivos del backend al servidor sin node_modules
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem
      
          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
          cd /opt/conexus
          if [ -d ./back-node ]; then 
            sudo rm -r ./back-node
          fi
          mkdir -p back-node
          EOF
      
          rsync -avz --exclude=node_modules -e "ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem"  back-node/node ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/back-node/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem" back-node/data ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/back-node/
      
      - name: Copiar prod.Dockerfile al servidor
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          # Copiar el prod.Dockerfile al servidor en la carpeta back-node
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem back-node/node/prod.Dockerfile ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/back-node/node/

  SETUP-SSL:
    needs: [BUILD-FRONTEND-AND-BUILD-PORTAINER, BUILD-BACKEND]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copiar script de generaci√≥n de SSL
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          # Crear directorio scripts si no existe
          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} "mkdir -p /opt/conexus/scripts"
          
          # Copiar script de generaci√≥n de SSL
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem scripts/generate-ssl.sh ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/scripts/
          
          # Dar permisos de ejecuci√≥n
          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} "chmod +x /opt/conexus/scripts/generate-ssl.sh"

      - name: Copiar docker-compose.prod.yml
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem
          
          # Copiar docker-compose
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem docker-compose.prod.yml ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/

  START-DOCKER-COMPOSE-PRINCIPAL:
    needs: [SETUP-SSL]
    runs-on: ubuntu-latest
    steps:
      - name: Conectar a la m√°quina de producci√≥n y levantar contenedores
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            echo "üö¢ Levantando contenedores Docker..."

            cd /opt/conexus

            # Generar certificados SSL si no existen 
            if [ ! -d "/opt/conexus/letsencrypt/live/conexushub.cat" ]; then
              echo "üîí Generando certificados SSL..."
              
              # Detener cualquier servicio que pueda estar usando el puerto 80
              sudo systemctl stop nginx || true
              sudo systemctl stop apache2 || true
              sudo lsof -ti:80 | xargs kill -9 || true
              
              # Ejecutar el script de generaci√≥n de certificados
              sudo /opt/conexus/scripts/generate-ssl.sh
            else
              echo "‚úÖ Los certificados SSL ya existen"
            fi

            if [ -f docker-compose.prod.yml ]; then
              echo "üßπ Parando y eliminando contenedores anteriores..."
              docker-compose -f docker-compose.prod.yml down

              echo "üîß Levantando Backend y Frontend..."
              docker-compose -f docker-compose.prod.yml up -d --build
            else
              echo "‚ùå No se encontr√≥ el archivo docker-compose.prod.yml"
              exit 1
            fi

            echo "üéâ Contenedores levantados con √©xito"
          EOF
