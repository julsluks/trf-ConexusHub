services:
  conexus-hub-front:
    build:
      context: ./front-vue
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./front-vue:/app
      - /app/node_modules
    working_dir: /app
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - HOST=0.0.0.0
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - conexus-hub-network

  conexus-hub-back:
    build:
      context: ./back-node/node
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "3001:3001"
      - "3002:3002"
      - "3003:3003"
      - "3004:3004"
      - "3005:3005"
      - "3006:3006"
      - "3007:3007"
    volumes:
      - ./back-node/node:/app
      - /app/node_modules
    working_dir: /app
    environment:
      - NODE_ENV=development
    env_file:
      - .env
    depends_on:
      conexus-hub-mysql:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Esperando a que MySQL esté disponible...'
        while ! nc -z conexus-hub-mysql 3306; do
          sleep 1
        done
        echo 'MySQL está disponible, iniciando la aplicación...'
        npm run dev 
      "
    # command: npm run dev # para desarrollo
    # command: npm run start # para producción
    restart: unless-stopped
    networks:
      - conexus-hub-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "conexus-hub-mysql" ]
      interval: 30s
      timeout: 10s
      retries: 5

  conexus-hub-mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=conexushub
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - conexus-hub-mysql-data:/var/lib/mysql
      - ./back-node/data/00-charset.sql:/docker-entrypoint-initdb.d/00-charset.sql
      - ./back-node/data/create_db.sql:/docker-entrypoint-initdb.d/01-create.sql
      - ./back-node/data/insert_db.sql:/docker-entrypoint-initdb.d/02-inserts.sql
    restart: unless-stopped
    networks:
      - conexus-hub-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  conexus-hub-adminer:
    image: adminer
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - conexus-hub-network

  conexus-hub-mongodb:
    image: mongo
    restart: always
    container_name: conexus-hub-mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo-db:/data/db
    networks:
      - conexus-hub-network
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 40s

  conexus-hub-mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@conexus-hub-mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - conexus-hub-mongodb
    networks:
      - conexus-hub-network

volumes:
  conexus-hub-mysql-data:
  mongo-db:


networks:
  conexus-hub-network:
    driver: bridge
